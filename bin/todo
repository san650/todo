#!/usr/bin/env bash

COMMAND="$1"
shift

FOLDER=${TODO_PATH:-$HOME/.todo}
PROJECT=${TODO_PROJECT:-default}
WRITE_FILE="$FOLDER/$PROJECT"
FILTER="$TODO_FILTER"

if [ ! -f "$WRITE_FILE" ]; then
  touch "$WRITE_FILE"
fi

function print_header
{
  echo
  echo "# Project: $PROJECT ~"
}

function print_all
{
  print_header
  echo
  cat -n "$WRITE_FILE"
}

function print_pending
{
  print_header

  if [ ! -z "$FILTER" ]; then
    echo "# Filtering by: $FILTER"
  fi

  echo

  cat -n "$WRITE_FILE" | sed -n '/- \[ \]/p' | grep "$FILTER"
}

function print_filtered
{
  print_header

  if [ ! -z "$1" ]; then
    echo "# Filtering by: $1"
  fi

  echo

  cat -n "$WRITE_FILE" | sed -n '/- \[ \]/p' | grep "$1"
}

function commit
{
  (cd "$FOLDER" \
    && git add "$WRITE_FILE" \
    && git commit -m "$1" 2>&1 > /dev/null)
}

function init_repo
{
  if [ ! -d "$FOLDER" ]; then
    mkdir -p "$FOLDER"
    touch "$WRITE_FILE"
  fi

  if [ ! -d "$FOLDER/.git" ]; then
    (cd "$FOLDER" \
      && git init --quiet \
      && git add --all \
      && git commit --quiet --message "Init new ToDo repo")
  fi
}

function list_projects
{
  (
    cd "$FOLDER" \
      && ls -1
  )
}

function print_help
{
  echo '
    Usage:
        todo                    - List uncompleted items
        todo add [message]      - Add a new todo item
        todo all                - List all todo items (even the completed ones)
        todo filter [keywords]  - Filter the list of todo items
        todo edit [n] [message] - If [n] and [message] are given, update a todo item, else it opens DB file using vim
        todo done [n]           - Marks a todo item as completed
        todo undone [n]         - Marks a todo item as uncompleted
        todo projects           - List existing projects
        todo raw                - Shows the raw DB file

    ENV VARS

    TODO_PATH    - Set DB folder path, uses "$HOME/.todo" by default.
    TODO_PROJECT - Set current DB file to use, uses "default" by default.
    TODO_FILTER  - Set default filter
  '
}

init_repo

case $COMMAND in
  "")
    print_pending
    ;;
  add)
    MESSAGE="$@"
    echo "- [ ] $MESSAGE" >> "$WRITE_FILE"
    commit "Add ToDo item"
    ;;
  all)
    print_all
    ;;
  "done")
    sed -i.bak "$1s/\[ \]/[x]/" "$WRITE_FILE"
    commit "Completed ToDo item #$1"
    ;;
  undone)
    sed -i.bak "$1s/\[x\]/[ ]/" "$WRITE_FILE"
    commit "Undone ToDo item #$1"
    ;;
  filter)
    if [ ! -z "$1" ]; then
      print_filtered "$1"
    else
      echo "ERROR: expected filter param"
      echo "e.g. todo filter foo"
      exit 1
    fi
    ;;
  edit)
    if [ ! -z "$1" ] && [ ! -z "$2" ]; then
      LINE=$1
      shift
      MESSAGE="$@"

      sed -i.bak "${LINE}c\\
- [ ] $MESSAGE
" "$WRITE_FILE"
    commit "Edit ToDo item #$LINE"
    else
      vim "$WRITE_FILE"
      commit "Custom edit"
    fi
    ;;
  raw)
    cat "$WRITE_FILE"
    ;;

  projects)
    list_projects
    ;;
  help)
    print_help
    ;;
    *)
    echo "Error: command '$COMMAND' unknown"
    print_help

    exit 1
    ;;
esac
